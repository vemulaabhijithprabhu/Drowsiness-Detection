#Python Code


import cv2   #libraries
import os
from keras.models import load_model
import numpy as np
from pygame import mixer
import time
mixer.init()
sound = mixer.Sound('C:/Users/V.Abhijith/OneDrive/Documents/Drowsiness-Detection-master/alarm.wav')
face = cv2.CascadeClassifier('C:/Users/V.Abhijith/OneDrive/Documents/Drowsiness-Detection-master/haarcascade_frontalface_alt.xml')  # this is a classifier for detecting frontal faces in an image
leye = cv2.CascadeClassifier('C:/Users/V.Abhijith/OneDrive/Documents/Drowsiness-Detection-master/haarcascade_lefteye_2splits.xml')  # this is a classifier for detecting the left eye in a faces 
reye = cv2.CascadeClassifier('C:/Users/V.Abhijith/OneDrive/Documents/Drowsiness-Detection-master/haarcascade_righteye_2splits.xml') # this is a classifier for detecting the right eye in a faces 
lbl=['Close','Open']  #  This line creates a list of two labels, 'Close' and 'Open', which will be used to label the eye state later in the code.
model = load_model('C:/Users/V.Abhijith/OneDrive/Documents/Drowsiness-Detection-master/model_weigths.h5')  #loads a pre-trained model from the specified path. The model will be used to predict the eye state based on the input image.
path = 'C:/Users/V.Abhijith/OneDrive/Documents/Drowsiness-Detection-master/model_weigths.h5'
cap = cv2.VideoCapture(0)  #This line creates a VideoCapture object which captures video from the default camera (usually the webcam). This object will be used to read frames from the video stream.
font = cv2.FONT_HERSHEY_COMPLEX_SMALL  #This line sets the font type for the text that will be displayed on the output screen.
count=0                #This variable will be used to count the number of frames for which the eyes are closed.
score=0                #This variable will be used to keep track of the score (percentage of frames for which the eyes were closed) for a given time period
thicc=2                #This variable sets the thickness of the line that will be used to draw the rectangle around the eyes.
rpred=[99]        #These variables will be used to store the predicted state of the right and left eyes, respectively, in the previous frame. They are initialized to 99 to indicate that no prediction has been made yet.
lpred=[99]
while(True):        #starts an infinite loop which captures video frames from the computer's camera until the loop is interrupted.
    ret, frame = cap.read()               #captures the current frame from the camera and stores it in the frame variable.
    height,width = frame.shape[:2]         #gets the height and width of the frame.
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)   #converts the frame from color to grayscale.
    faces = face.detectMultiScale(gray,minNeighbors=5,scaleFactor=1.1,minSize=(25,25))  
    #   detects faces in the grayscale frame using the CascadeClassifier object face. The detectMultiScale function returns a list of rectangles representing the detected faces.
    left_eye = leye.detectMultiScale(gray)  #detects the left eye in the grayscale frame using the CascadeClassifier object leye. The detectMultiScale function returns a list of rectangles representing the detected left eyes.
    right_eye = reye.detectMultiScale(gray)
    cv2.rectangle(frame, (0,height-50) , (200,height) , (0,0,0) , thickness=cv2.FILLED )   #draws a black rectangle at the bottom of the frame to display text.
    for (x,y,w,h) in faces:  #loops over the list of detected faces and draws a rectangle around each face using the cv2.rectangle function.
        cv2.rectangle(frame, (x,y) , (x+w,y+h) , (100,100,100) , 1 )
    for (x,y,w,h) in right_eye:
        r_eye=frame[y:y+h,x:x+w]
        count=count+1
        r_eye = cv2.cvtColor(r_eye,cv2.COLOR_BGR2GRAY)
        r_eye = cv2.resize(r_eye,(24,24))
        r_eye= r_eye/255
        r_eye= r_eye.reshape(24,24,-1)
        r_eye = np.expand_dims(r_eye,axis=0)
        rpred = model.predict(r_eye)
        rpred = np.argmax(rpred,axis=1)  #gets the index of the maximum value in the rpred array. If rpred is [0], it means the right eye is closed. If rpred is [1], it means the right eye is open.
        if(rpred[0]==1):
            lbl='Open'
        if(rpred[0]==0):
            lbl='Closed'
        break
    for (x,y,w,h) in left_eye:
        l_eye=frame[y:y+h,x:x+w]
        count=count+1
        l_eye = cv2.cvtColor(l_eye,cv2.COLOR_BGR2GRAY)
        l_eye = cv2.resize(l_eye,(24,24))
        l_eye= l_eye/255
        l_eye=l_eye.reshape(24,24,-1)
        l_eye = np.expand_dims(l_eye,axis=0)
        lpred = model.predict(l_eye)
        lpred = np.argmax(lpred,axis=1)
        if(lpred[0]==1):
            lbl='Open'
        if(lpred[0]==0):
            lbl='Closed'
        break
    if(rpred[0]==0 and lpred[0]==0): #This block of code is checking if both the left eye and right eye are closed simultaneously. 
        score=score+1        #The score is used to track the number of consecutive frames where both eyes have been detected as closed
        cv2.putText(frame,"Closed",(10,height-20), font, 1,(255,255,255),1,cv2.LINE_AA) # The current score is also displayed on the frame next to the text "Score:". 
        cv2.putText(frame,'Score:'+str(score),(100,height-20), font, 1,(255,255,255),1,cv2.LINE_AA)  #If both eyes are detected as closed, the score is incremented by 1 and the text "Closed" is displayed on the frame.

    else:
        score=score-1
        cv2.putText(frame,"Open",(10,height-20), font, 1,(255,255,255),1,cv2.LINE_AA)
    if(score<0):  #These lines of code check the value of the variable score and perform different actions based on its value.
        score=0
        cv2.putText(frame,'Score:'+str(score),(100,height-20), font, 1,(255,255,255),1,cv2.LINE_AA) #If score is less than 0, it sets score to 0 and displays the current score on the frame using cv2.putText() function.
    if(score>10): #If score is greater than 20, it means that the person is feeling sleepy, so the program saves the current frame using cv2.imwrite() function and plays an alarm sound using
        cv2.imwrite(os.path.join(path,'image.jpg'),frame)
        try:
            sound.play()
        except: # isplaying = False
            pass
        if(thicc<16):
            
            thicc= thicc+2
        else:
            thicc=thicc-2
            if(thicc<2):
                thicc=2
        cv2.rectangle(frame,(0,0),(width,height),(0,0,255),thicc)
    cv2.imshow('frame',frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
cap.release()
cv2.destroyAllWindows()
